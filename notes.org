* skeleton outline (copied from google doc)
** what was the thing?                                                 :PHIL:
   - intro:
     - GOV.UK Verify as starting point
       - screenshots?
     - then extend to organizations?
   - GDS & services
   - GOV.UK Verify
   - organisations: the problem domain
   - [[https://www.gov.uk/service-manual/phases/alpha.html][alpha]]
     - service manual
     - purpose:
       - can we build something that users will want to use?
       - test design approaches
         - will users want to use it?
       - test technology
         - can we build it?
       - gain shared understanding of the service at an architectural
         level
       - understand what or who you will need to build a beta
         - find out:
           - do we need to build something?
           - what would the architecture look like?
       - keep user research honest
     - copied from blog:
       - what do users need when they’re accessing a digital service on
         behalf of an organisation?
       - is there a generic need across government for a way for people
         to prove, using digital means, that they have authority to do a
         specific thing on behalf of an organisation?
       - can the needs be met from existing solutions in the market, or
         is there a need to build something new?
       - if we were to build something new, should it be a
         cross-government service like GOV.UK Verify?
       - how can someone prove, entirely digitally, that an organisation
         exists and they have authority to act on its behalf?
   - team:
     - roughly split between user research & architecture research
   - introduction to web authentication
     -
   - architectural questions
     - hub or no hub?
     - who stores what?
     - extra data sources?

Good afternoon!  I am Philip Potter <rachel introduces herself>

We work at the Government Digital Service.  I am a civil servant,
<rachel introduces tw>

We work for the GOV.UK Verify programme.  Part of what we are doing in
Government is taking services that traditionally have been provided in
non-digital means, and making them available digitally.  Services such
as: register to vote, ...

As part of this, the service needs to be certain that you are who you
say you are.  To this end, we are developing GOV.UK Verify, which
looks something like this:

I have a service I want to log in to -- in this case, I'm buying my
brother Harry a new wand for Christmas, and I want to register it with
the Ministry of Magic.  To start the transaction, the service sends me
to the GOV.UK Verify hub service to get me to log in.  I choose from a
list of identity providers: we currently have two, experian and
digidentity; we have two more coming onboard soon, the Post Office and
Verizon, and we hope to expand this even wider in the medium term.

I'm choosing digidentity because I have previously set up an account
with them.  They send my Matching Data Set -- my name, address, date
of birth, and gender -- back to the GOV.UK Verify hub, which passes
them back to the wand registration service.

What we've achieved here is:

  - a single login for all services (eventually)
    - I used this for wand registration, but I could also use it for
      my tax return
  - avoided building a single government identity database
  - the identity provider doesn't know which service I used
    - they won't see that I'm registering a wand, rather than paying
      my tax

This is now in public beta: there are services which are using this
system to verify the identity of the people using them.

There is a use case, though, which this doesn't cover: what if I'm not
doing this for myself, but on behalf of an organisation?  Maybe the
wand isn't registered to me personally, but to my professional
Quidditch club.  Maybe I'm not doing my personal tax return, but that
of my company.  How would we build digital services which could allow
people to do this?  What would they look like?  What would we have to
think about?

In the Spring of this year, we worked on a prototype to try to answer
some of these questions.  We had a team of roughly 10 people, split
into two broad streams of work: user research, and technical
prototyping.  The question we were asking was: "can we build something
people would want to use?"  The user researchers were tackling the
second half of this question, while we on the technical side were
tackling the first half.



** why clojure?                                                        :PHIL:
   - GOV.UK Verify is already on the JVM
     - Java
   - two key technologies: SAML & OpenID Connect, are xml and json
     based respectively
   - hitchhiking antipattern
     - http://overwatering.org/blog/2014/11/the-hitchhiking-anti-pattern/

We built our prototype in Clojure -- hence this talk.

** how did we get on with clojure?
*** for the first time?                                              :RACHEL:
    - 4 devs on the team, 2 had written some clojure before
    - 2 had not, and had only o-o experience
    - I’d done some Scala and a bit of racket which is a lisp dialect
    - Obviously we were building a prototype that needed to evolve quickly.
    - There was no time to learn the language first
    - Had to learn as we went along

    - Found clojure really easy to pick up
    - Concise language
    - Like that extra features are added on in separate libraries not put into the core language
    - Good documentation
    - Not much code
    - Easy to read, easy to debug
    - http request and response are maps, so once you know what you can do with a map

    - To begin with I would keep this open when working
    - single page
    - shows how concise the language is
    - you couldn’t do that with java

    - Cider repl: clojure repl and ide for emacs
    - built on nrepl
    - lets you connect to a running app
    - and dynamically redefine parts of it
    - really fast feedback
    - jay fields - repl driven development
    - is my app doing what i expect?
    - what happens when i execute this arbitrary code?
    - initially this second point helped me work out how to use the language
    - quicker feedback than unit test
    - and for that sort of thing you would end up deleting the test anyway

*** with emacs?                                                        :RACHEL:
    - 4 of us on the team, mostly pair programming
    - 1 had used emacs, 1 vi, 2 of us neither
    - easier to use the same ide when you're pairing?
    - emacs has evil mode for our vi user
    - 2 of us would have to learn something new anyway
    - although i’ve recently been hearing good things about cursive plugin for intellij
    - so decided to use emacs
    - much steeper learning curve than clojure
    - still struggled with it by the end
    - missed having an ide for small refactors and renames
    - by halfway felt like it wasn't actively blocking me getting things done
    - but also didn't feel like it was helping

    - there are many cheatsheets
    - whereas clojure has just one
    - much more complicated than the clojure cheatsheets!
    - and does not fit on one page!
    - i think if you want to get moving quickly with clojure, emacs at the same time maybe isn't the win

*** for your day job?                                                  :PHIL:
    - worry: using a language for a hobby is not the same as using it
      for your day job
      - it's not a fair comparison
        - no legacy code
        - can chase new shiny all the time
        - if something doesn't work in a side project, can just give
          up and look at something else instead
        - side projects are small and so can't grow unwieldy
      - this is true for most new technology
    - worries: generally unfounded
      - a joy to work with
      - learned some of clojure's weaker points
      -
** what went well?
*** reloaded                                                         :RACHEL:
    - as well as cider we used stuart sierra's reloaded flow
    - this allows you to make a change to your source code, call (reset) in the repl, and see the change in your running app
    - it uses clojure.tools.namespace to work out which source files have changed
    - refreshes these in the running dev env

    - so you define a reset function in user.clj
    - this is loaded by default when you start the repl
    - stops the running app
    - reloads changed namespaces
    - creates and starts the app again
    - all within the same jvm
    - so super fast
    - the other great thing about this, that you can’t really see from this example - is that we actually ended up with about 5 different web services that we were running at once.
    - The reloaded workflow meant that we could make a change to a bit of code that was used by more than one of the services, and by calling refresh, both would pick up the changes straightaway.
    - definitely recommend getting this working as soon as possible, we left it quite late
    - you just define a dev profile in your leingingen config
    - so the user.clj file is only used in dev
    - not deployed in the jar
    - and be careful about any global state in your application, because you want to be able to stop and start back up again easily
    - the only thing that was not so awesome with this, and we’ll talk more about this later
    - is when we wanted to change something on the ui
    - we used enlive for templating, and had jade files that produced html
    - when a jade or html file changed on disk it was not picked up by the reloaded flow
    - this was the only limitation we found

*** kerodon & peridot                                                  :PHIL:
    - these were a joy to use
    - vhosting at the ring handler level made this project much easier
      to write coherent tests for
    - issues fixed:
      - https://github.com/xeqi/kerodon/pull/25
      - https://github.com/xeqi/peridot/issues/17
*** inserting or removing the orchestration                          :RACHEL:
    - One thing we wanted was to try out a few different architectures and see what worked best
    - We started with just a service and an identity provider and explored this flow
    - So here the user would be redirected from the service directly to the identity provider
    - they would log in at the identity provider
    - then be redirected back to the service with their identity assured
    - this is by far the simplest flow
    - however it doesn’t scale that well
    - what if i want to use my login with the identity provider to access another government service?
    - or what if, like in gov uk verify, i want to have the choice between different identity providers?

    - Adding a hub in the middle brings this flexibility
    - work with multiple services
    - work with multiple idps
    - only need to change the hub in the middle
    - also a layer of privacy in the middle
    - the service doesn't need to know which idp is being used
    - idp doesn't need to know which service is being used
    - to the service the hub looks like an idp
    - to the idp the hub looks like a service
    - how gov uk verify works
    - hub doesn't store any data
    - just passes data around
    - with ring and compojure it was easy to add another web service
    - and easy to develop as we had the reloaded flow
    - and easy to test because of our kerodon tests

    - Started with just 2 services - candela, the service
    - michie, the identity provider
    - then added in knox, the orchestration hub
    - then added in wheatstone, who would store the relationships between organisations and agents
    - then finally added in al-kindi, who would provide information about organisations.

** what didn't go so well?                                             :PHIL:
   - enlive
   - stubbing
     - http://blog.josephwilk.net/clojure/isolating-external-dependencies-in-clojure.html
** was it a success/what is happening now?                                    :RACHEL:
    - Successful alpha in that we learnt a lot about the problem domain
    - didn't implement everything
    - but have good understanding of how the system could work
    - and different options of how it could be built
    - could see what would require further technical exploration
    - with the kerodon tests we have an expressive technical artifact
    - However, GDS are not building a beta

    - We found that the needs for organisation identity assurance are not the same across services
    - for example, ???
    - doesn't make sense for gds to build a govt wide thing
    - some services need fine grained perms, others don't
    - for example, in the wands service I can simply register wands, whereas in other services, for example an HMRC service to pay tax on behalf of my organisation, there may be some taxes I can pay, some I don’t have the authority to pay.
    - Also we found through user research that some services already have relationships established
    - if you’re the headmaster of hogwarts and have been registering wands for ten years with the ministry of magic you don't want to suddenly prove that you have the authority to do so

** Would we choose clojure for a similar project with a similar team?   :RACHEL:
    - With a similar team, yes
    - probably even if the team had no experience in clojure
    - it is quick to pick up
    - this alpha set a very good precedent for using clojure at gds
    - Other TW prototypes have since been built in clojure
    - with non-clojure devs on the team
    - so it’s definitely the language we would choose for building prototypes where you need to evolve quickly

* parking lot of ideas
** things to define for rachel
   - IdP and Hub
   - SAML and OpenID Connect
   - issues with enlive
** links
   - verify blog https://identityassurance.blog.gov.uk/
     - especially https://identityassurance.blog.gov.uk/2014/10/20/identity-assurance-for-organisations-and-agents/
   - service manual
     - especially https://www.gov.uk/service-manual/phases/alpha.html and https://www.gov.uk/service-manual/phases/ideal-alphas#ending-the-alpha
   - Jay Fields blog
     - Repl-Driven Development http://blog.jayfields.com/2014/01/repl-driven-development.html
   - Giles Anderson blog
     - Hitch-hiker Anti-pattern http://overwatering.org/blog/2014/11/the-hitchhiking-anti-pattern/
   - Stuart Sierra blog
     - My Clojure Workflow, Reloaded http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded
   - Emacs Cheatsheet http://www.rgrjr.com/emacs/emacs_cheat.html
   - Clojure Cheatsheet http://clojure.org/cheatsheet

** web sequence diagrams
*** simplified auth flow

participant Service
participant User Agent
participant Identity Provider


User Agent->Service: Hello! I'd like to do something!
Service->User Agent: Who are you? Go to Identity Provider with this authn request
User Agent->Identity Provider: I want to use <Service>, here's a request from them
Identity Provider->User Agent: Please identity yourself
User Agent->Identity Provider: <sign-in credentials>
Identity Provider->User Agent: Looks good, take this signed assertion that you're okay with me
User Agent->Service: This signed messsage says I'm good, let me in
Service->User Agent: Great, let's get started!

*** simplified auth flow, implicit UA

participant Service
participant Identity Provider

Service->Identity Provider: (via user agent) Who is this user?
note over Identity Provider: User authenticates with credentials
Identity Provider->Service: (via user agent) This user is John Smith

*** citizen verify

participant Service
participant User Agent
participant Hub
participant Identity Provider


User Agent->Service: Hello! I'd like to do something!
Service->User Agent: Go to hub with AuthnRequest
User Agent->Hub: I want to use <Service>, here's a request from them
Hub->User Agent: Go to IdP with AuthnRequest
User Agent->Identity Provider: I want to use the identity hub, here's a request from them
Identity Provider->User Agent: Please identity yourself
User Agent->Identity Provider: <sign-in credentials>
Identity Provider->User Agent: Looks good, take this signed assertion that you're okay with me
User Agent->Hub: The IdP says I'm cool
Hub->User Agent: Looks good, take this token to the service
User Agent->Service: The hub says I'm good, let me in
Service->User Agent: Great, let's get started!

*** citizen verify, implicit UA

participant Service
participant Hub
participant Identity Provider


Service->Hub: (via user agent) Who is this user?
note over Hub
  user chooses an
  identity provider
end note
Hub->Identity Provider: (via user agent) Who is this user?
note over Identity Provider
  user authenticates
  with credentials
end note
Identity Provider->Hub: (via user agent, signed) This is John Smith
Hub->Service: (via user agent, signed) This user is John Smith
